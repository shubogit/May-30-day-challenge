https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/534/week-1-may-1st-may-7th/3322/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
//    public static int findParent(TreeNode node, 
//                        int val, int parent) 
// { 
//     if (node == null) 
//         return -1; 
  
//     // If current node is the required node 
//     if (node.val == val)  
//     { 
  
//         return parent; 
//     } 
//     else 
//     { 
        
//         findParent(node.left, val, node.data); 
//         findParent(node.right, val, node.data); 
//     } 
// } 
    
//     public int depth(TreeNode root, int val, int height) {
//        int ldepth = depth(root.left , data, height+1);
//         if (ldepth > 0)
//             return ldepth;
//         int rdepth = depth(root.right, data, height+1);
//         if (rdepth > 0)
//             return rdepth;
        
//     }
    
    
    public boolean isCousins(TreeNode root, int A, int B) {
        if (root == null) return false;
	Queue<TreeNode> queue = new LinkedList<>();
	queue.offer(root);
	while (!queue.isEmpty()) {
		int size = queue.size();
		boolean isAexist = false;		
		boolean isBexist = false;		
		for (int i = 0; i < size; i++) {
			TreeNode cur = queue.poll();
            if (cur.val == A) isAexist = true;
            if (cur.val == B) isBexist = true;
			if (cur.left != null && cur.right != null) { 
				if (cur.left.val == A && cur.right.val == B) { 
					return false;
				}
				if (cur.left.val == B && cur.right.val == A) { 
					return false;
				}
			}
			if (cur.left != null) {
				queue.offer(cur.left);
			}
			if (cur.right != null) {
				queue.offer(cur.right);
			}
		}
		if (isAexist && isBexist)  return true;
	}
	return false;
    }
}
