link: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3332/

// This is a beautiful problem which uses both concept of window sliding and trick of storing and using count of each character of string 
// Still has to fix the brute force approach, as its not working for larger test cases??


class Solution {
    
    public List<Integer> findAnagrams(String s, String p) {
     
        List<Integer> ans = new ArrayList<>();
//         int slen = s.length(); int plen = p.length();
//         // Map<Integer, String> map = new HashMap<>();
        
        
//         for(int i  = 0; i <= s.length()-p.length(); i++) {
            
//             String checkSubstring = s.substring(i, i+plen);
//             char arr[] = checkSubstring.toCharArray();
//             Arrays.sort(arr);
//             String str = String.valueOf(arr);
            
//            if(str.equals(p)) {
//                ans.add(i);
//            }
            
//         }
        
        
//         return ans;
        
        
        int char_counts[] = new int[26];
        for(char ch : p.toCharArray()) {
            char_counts[ch-'a']++;
        }
        
        int left = 0;
        int right = 0;
        int count = p.length();
        
        while(right < s.length()) {
            if(char_counts[s.charAt(right++)-'a']-- >= 1) count--;
            if(count == 0) ans.add(left);
            if(right -left == p.length() && char_counts[s.charAt(left++) -'a']++ >= 0)
                count++;
        }
        return ans;
    }
}
